//
// EmailForm.jsx
// Robert Macklem
// Jul 8 2025
//
// The form users use to compose and edit emails, and the final submit button
// to PUT or POST it to the api. It takes in the selectedEmail from parent state
// and also the editMode (see App.jsx) as well as setter functions for handling
//

import { useState } from "react";

const API_URL = import.meta.env.VITE_API_URL;

export default function EmailForm({
  selectedEmail,
  editMode,
  setEditMode,
  setShowForm,
  setUpdateEmails,
}) {
  const [subject, setSubject] = useState(editMode ? selectedEmail.subject : "");
  const [body, setBody] = useState(editMode ? selectedEmail.body : "");

  const json = {
    subject: subject,
    body: body,
  };

  function clearForm() {
    setSubject("");
    setBody("");
    setEditMode(false);
  }

  // The below http body params append operatopr: '...json' I got from ChatGPT. The overall promt->response is far too long (think 8x the file length+) to paste
  // because I quickly CTRL+A -> CTRL+C -> CTRL+V into ChatGPT often with a simple question to save time. I asked why my fetches werent working (I forgot async/await tags)
  // and this operator was a useful side effect of the prompt response:

  // **********************
  // ***    RESPONSE    ***
  // **********************
  // âœ… FIXED sendEmail() FUNCTION:

  // Replace your sendEmail() with this:

  // const sendEmail = async () => {
  // 	try {
  // 		const payload = {
  // 			subject: subject.trim(),
  // 			body: body.trim(),
  // 		};

  // 		const url = editMode
  // 			? `${API_URL}/${selectedEmail.id}`
  // 			: API_URL;

  // 		const method = editMode ? "PUT" : "POST";

  // 		const res = await fetch(url, {
  // 			method,
  // 			headers: { "Content-Type": "application/json" },
  // 			body: JSON.stringify(
  // 				editMode ? { id: selectedEmail.id, ...payload } : payload
  // 			),
  // 		});

  // 		if (!res.ok) {
  // 			throw new Error(`HTTP Error on ${method}. Status: ${res.status}`);
  // 		}

  // 		console.log(`${method} successful`);
  // 		setShowForm(false);
  // 		setEditMode(false);
  // 	} catch (e) {
  // 		console.error(`Error: ${e.message}`);
  // 	}
  // };
  // *********************

  // Needless to say I did not accept all the changes as my code below works fine and I
  // prefer it to this odd style which is hard to read.

  const sendEmail = async () => {
    // HTTP Requests
    try {
      if (editMode) {
        // PUT request with selectedEmail id to update it
        const re = await fetch(`${API_URL}/${selectedEmail.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id: selectedEmail.id, ...json }),
        });

        if (!re.ok) throw new Error(`HTTP Error on PUT. Status: ${re.status}`);
      } else {
        // POST request for new email (id should be autogenerated?)
        const re = await fetch(`${API_URL}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(json),
        });

        if (!re.ok)
          throw new Error(`HTTP Error on DELETE. Status: ${re.status}`);
      }

      // Error handling
    } catch (e) {
      console.log(`Error: ${e.message}`);
    }

    // Wrap-up
    clearForm(); // Clear
    setShowForm(false); // Close
    setUpdateEmails(true); // Update inbox
  };

  return (
    <div className="flex flex-col flex-grow border bg-white rounded-lg shadow-xl">
      <form
        className="flex flex-col flex-grow gap-3 p-5"
        onSubmit={(e) => {
          e.preventDefault();
          sendEmail();
        }}
      >
        <div className="flex flex-row justify-between">
          <label>Subject:</label>
          {/* Top-right close button (just text X) */}
          <button
            className="hover:text-gray-500"
            onClick={() => {
              setShowForm(false);
              setEditMode(false);
            }}
          >
            X
          </button>
        </div>

        {/* The input and textarea we use to actually draft/edit */}
        <input
          className="border rounded-md p-2"
          value={subject}
          onChange={(e) => setSubject(e.target.value)}
          required
        />
        <label>Body:</label>
        <textarea
          className="border min-h-[20vh] rounded-md p-2"
          value={body}
          onChange={(e) => setBody(e.target.value)}
          required
        />

        {/* Buttons div (form child for submit purposes)*/}
        <div className="flex flex-row justify-end gap-2">
          {/* Cancel Button */}
          <button
            type="button"
            className="px-4 py-2 rounded-full border border-red-600 text-red-600 hover:bg-red-600 hover:text-white"
            onClick={() => {
              setShowForm(false);
              setEditMode(false);
            }}
          >
            Cancel
          </button>

          {/* Send button w/ Font Awesome */}
          <button
            type="submit"
            className="flex flex-row gap-2 px-5 py-2 bg-blue-600 hover:bg-blue-800 rounded-full"
          >
            {/* Credit: Font Awesome @ https://fontawesome.com/*/}
            <img src="/send.svg" width={16} height={16} />
            <p className="text-white">Send</p>
          </button>
        </div>
      </form>
    </div>
  );
}
